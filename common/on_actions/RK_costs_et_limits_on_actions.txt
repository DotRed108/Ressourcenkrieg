on_actions = {
	on_startup = {
		effect = {
			# Sets base limits
			every_country = {
				THIS = {
					# sets base limits that every nation will have regardless of infrastructure
					set_variable = {
						base_rubber_limit = 200
					}
					set_variable = {
						base_grain_limit = 1000
					}
					set_variable = {
						base_coal_limit = 500
					}
					# sets starting limit values to the base value
					set_variable = {
						rubber_limit = base_rubber_limit
					}
					set_variable = {
						grain_limit = base_grain_limit
					}
					set_variable = {
						coal_limit = base_coal_limit
					}
					# Calculates all building levels at start of game
					every_controlled_state = {
						add_to_variable = {
							PREV.total_infrastructure_level = infrastructure_level
						}
						add_to_variable = {
							PREV.num_of_synths = building_level@synthetic_refinery
						}
					}
				}
			}
			# APPLIES INITIAL COAL AND GRAIN COST FOR EVERY NATION
			every_country = {
				THIS = {
					set_variable = {
						grain_needed_by_people = max_manpower_k
					}
					divide_variable = {
						grain_needed_by_people = 1000
					}
					round_variable = grain_needed_by_people
					set_variable = {
						last_grain_needed_distribution_facilities = grain_needed_by_people
					}
					add_offsite_building = {
						type = grain_distribution_facility
						level = grain_needed_by_people
					}
					set_variable = {
						coal_needed_by_factories_et_synths = num_of_owned_factories
					}
					add_to_variable = {
						coal_needed_by_factories_et_synths = num_of_synths
					}
					add_offsite_building = {
						type = coal_distribution_facility
						level = num_of_owned_factories
					}
					set_variable = {
						last_coal_needed_by_factories_et_synths = num_of_owned_factories
					}
				}
			}
		}
	}
	######################## CALCULATE RESOURCE COAL AND GRAIN COSTS ##################################
	on_weekly = {
		effect = {
			ROOT = {
				set_variable = {
					total_infrastructure_level = 0
				}
				set_variable = {
					num_of_synths = 0
				}
				set_variable = {
					num_of_doks = 0
				}
				set_variable = {
					num_of_mils = 0
				}
				set_variable = {
					num_of_civs = 0
				}
				set_variable = {
					num_of_steel_mills = 0
				}
				set_variable = {
					num_of_alum_mills = 0
				}
				set_variable = {
					num_of_rubber_refineries = 0
				}
				if = {
					limit = {
						is_playing_rt56 = yes
					}
					every_controlled_state = {
						add_to_variable = {
							ROOT.total_infrastructure_level = infrastructure_level
						}
						add_to_variable = {
							ROOT.num_of_synths = building_level@synthetic_refinery
						}
						add_to_variable = {
							ROOT.num_of_doks = building_level@dockyard
						}
						add_to_variable = {
							ROOT.num_of_mils = building_level@arms_factory
						}
						add_to_variable = {
							ROOT.num_of_civs = building_level@industrial_complex
						}
						add_to_variable = {
							ROOT.num_of_steel_mills = building_level@steel_mill
						}
						add_to_variable = {
							ROOT.num_of_alum_mills = building_level@aluminum_mill
						}
						add_to_variable = {
							ROOT.num_of_rubber_refineries = building_level@rubber_refinery 
						}
					}
				} 
				else = {
					every_controlled_state = {
						add_to_variable = {
							ROOT.total_infrastructure_level = infrastructure_level
						}
						add_to_variable = {
							ROOT.num_of_synths = building_level@synthetic_refinery
						}
						add_to_variable = {
							ROOT.num_of_doks = building_level@dockyard
						}
						add_to_variable = {
							ROOT.num_of_mils = building_level@arms_factory
						}
						add_to_variable = {
							ROOT.num_of_civs = building_level@industrial_complex
						}
					}
				}
				################### CALCULATES ALL COAL NEEDED BY NATION ######################
				# # # # # # # # # # resource buildings # # # # # # # # 
				set_variable = {
					total_rubber_refinery_cost = num_of_rubber_refineries
				}
				multiply_variable = {
					total_rubber_refinery_cost = 3
				}
				set_variable = {
					total_synth_cost = num_of_synths
				}
				multiply_variable = {
					total_synth_cost = 3
				}
				set_variable = {
					total_steel_mill_cost = num_of_steel_mills
				}
				set_variable = {
					total_alum_mill_cost = num_of_alum_mills
				}
				set_variable = {
					total_resource_building_cost = total_synth_cost
				}
				add_to_variable = {
					total_resource_building_cost = total_rubber_refinery_cost
				}
				add_to_variable = {
					total_resource_building_cost = total_steel_mill_cost
				}
				add_to_variable = {
					total_resource_building_cost = total_alum_mill_cost
				}
				# # # # # # # # factory buildings # # # # # # # # # #
				set_variable = {
					coal_needed_by_factories_et_synths = num_of_civs
				}
				add_to_variable = {
					coal_needed_by_factories_et_synths = num_of_mils
				}
				add_to_variable = {
					coal_needed_by_factories_et_synths = num_of_doks
				}
				# # # # # # # THIS VARIABLE IS USED TO APPLY MODIFIERS # # # # # # 
				set_variable = {
					total_factory_cost = coal_needed_by_factories_et_synths
				}
				# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
				add_to_variable = {
					coal_needed_by_factories_et_synths = total_resource_building_cost
				}
				##############################################################################
				# Calculate Core and Occupied Population
				set_variable = {
					core_pop = 0
				}
				set_variable = {
					occ_pop = 0
				}
				every_core_state = {
					add_to_variable = {
						ROOT.core_pop = state_population_k
					}
				}
				set_variable = {
					occ_pop = max_manpower_k
				}
				subtract_from_variable = {
					occ_pop = core_pop
				}
				set_variable = {
					total_core_cost = core_pop
				}
				divide_variable = {
					total_core_cost = 1000
				}
				set_variable = {
					total_occupied_cost = occ_pop
				}
				divide_variable = {
					total_occupied_cost = 1000
				}
				round_variable = total_core_cost
				round_variable = total_occupied_cost
				# Calculate Grain needed by nation
				set_variable = {
					last_grain_needed_by_people = grain_needed_by_people
				}
				set_variable = {
					grain_needed_by_people = total_occupied_cost
				}
				add_to_variable = {
					grain_needed_by_people = total_core_cost
				}
			}
		}
	}
	############################### CALCULATE STOCKPILE LIMITS ############################################
	on_weekly = {
		effect = {
			ROOT = {
				set_variable = {
					threat_multiplier = global.threat
				}
				clamp_variable = {
					var = threat_multiplier
					max = 1
					min = 0.35
				}
				# Values were chosen using britain as baseline
				# With these values Britain would be able to run off stockpiles for 1 full year assuming no extra infrastructure and WT is at 100%
				# grain
				set_variable = {
					grain_limit = total_infrastructure_level
				}
				multiply_variable = {
					grain_limit = 300	# grain stockpile per infrastructure level
				}
				multiply_variable = {
					grain_limit = threat_multiplier
				}
				if = {
					limit = {
						has_idea = grain_stockpile_focus
					}
					multiply_variable = {
						grain_limit = 1.25
					}
				}
				round_variable = grain_limit
				
				# coal
				set_variable = {
					coal_limit = total_infrastructure_level
				}
				multiply_variable = {
					coal_limit = 600	# coal stockpile per infrastructure level
				}
				multiply_variable = {
					coal_limit = threat_multiplier
				}
				if = {
					limit = {
						has_idea = coal_stockpile_focus
					}
					multiply_variable = {
						coal_limit = 1.25
					}
				}
				round_variable = coal_limit
				
				# With this value Britain having 25 military factories on CAS would be able to keep up production for a year assuming no extra infrastructure and WT is at 100%
				# rubber
				set_variable = {
					rubber_limit = total_infrastructure_level
				}
				multiply_variable = {
					rubber_limit = 175	# rubber stockpile per infrastructure level
				}
				multiply_variable = {
					rubber_limit = threat_multiplier
				}
				if = {
					limit = {
						has_idea = rubber_stockpile_focus
					}
					multiply_variable = {
						rubber_limit = 1.25
					}
				}
				round_variable = rubber_limit
			}
		}
	}
	####################### Applies Grain cost from populations #########################
	on_weekly = {
		effect = {
			ROOT = {
				set_variable = {
					grain_needed_by_distribution_facilities = grain_needed_by_people
				}
				# Rationing has to be done before rounding
				multiply_variable = {
					grain_needed_by_distribution_facilities = rations
				}
				round_variable = grain_needed_by_distribution_facilities
				add_offsite_building = {
					type = grain_distribution_facility
					level = grain_needed_by_distribution_facilities
				}
				multiply_variable = {
					last_grain_needed_distribution_facilities = -1
				}
				add_offsite_building = {
					type = grain_distribution_facility
					level = last_grain_needed_distribution_facilities
				}
				set_variable = {
					last_grain_needed_distribution_facilities = grain_needed_by_distribution_facilities
				}
			}
		}
	}
	####################### THIS IS WHERE COAL COSTS ARE APPLIED ##################
	on_weekly = {
		effect = {
			ROOT = {
				add_offsite_building = {
					type = coal_distribution_facility
					level = coal_needed_by_factories_et_synths
				}
				multiply_variable = {
					last_coal_needed_by_factories_et_synths = -1
				}
				add_offsite_building = {
					type = coal_distribution_facility
					level = last_coal_needed_by_factories_et_synths
				}
				set_variable = {
					last_coal_needed_by_factories_et_synths = coal_needed_by_factories_et_synths
				}
			}
		}
	}
}