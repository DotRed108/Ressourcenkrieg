# percentage_of_factories_filled and its refinery counterpart ultimately ends up 
# having the value of the percentage of factories not filled
on_actions = {
	#################### MOST SHORTAGE PENALTIES CALCULATED HERE ##########################
	on_daily = {
		effect = {
			every_country = {
				THIS = {
					################### GRAIN ############################
					if = {
						limit = {
							check_variable = {
								total_grain_surplus < 0
							}
							check_variable = {
								grain_needed_by_people > 0
							}
						}
						set_variable = {
							percentage_of_occupied_fed = 0
						}
						set_variable = {
							percentage_of_core_fed = 0
						}
					
						set_variable = {
							available_grain = total_grain_surplus
						}
						add_to_variable = {
							available_grain = grain_needed_by_people
						}
						clamp_variable = {
							var = available_grain
							min = 0
							max = grain_needed_by_people
						}
						############# PERCENT OF ALL CORE AND OCCUPIED THAT CAN BE FED #####################
						set_variable = {
							percentage_of_people_fed = available_grain
						}
						divide_variable = {
							percentage_of_people_fed = grain_needed_by_people
						}
						##########################################################################################
						# No Priority Law
						set_variable = {
							percentage_of_occupied_fed = percentage_of_people_fed
						}
						set_variable = {
							percentage_of_core_fed = percentage_of_people_fed
						}
						if = {
							limit = {
								check_variable = {
									total_occupied_cost > 0
								}
							}
							# Prioritize Occupied Law
							if = {
								limit = {
									has_idea = prioritize_occupied_people
								}
								multiply_variable = {
									percentage_of_occupied_fed = 1.5 # Increase ratio that occupied population recieves food by 1.5
								}
								clamp_variable = {
									var = percentage_of_occupied_fed
									min = 0
									max = 1
								}
								set_variable = {
									num_of_occupied_fed = total_occupied_cost
								}
								multiply_variable = {
									num_of_occupied_fed = percentage_of_occupied_fed
								}
								# deal with cases when num_of_occupied_fed goes over maximum
								clamp_variable = {
									var = num_of_occupied_fed
									min = 0
									max = available_grain
								}
								set_variable = {
									percentage_of_occupied_fed = num_of_occupied_fed
								}
								divide_variable = {
									percentage_of_occupied_fed = total_occupied_cost
								}
								# find how much of the core population can be fed
								set_variable = {
									num_of_core_fed = available_grain
								}
								subtract_from_variable = {
									num_of_core_fed = num_of_occupied_fed
								}
								set_variable = {
									percentage_of_core_fed = num_of_core_fed
								}
								divide_variable = {
									percentage_of_core_fed = total_core_cost
								}
							}
							# Prioritize Core law
							else_if = {
								limit = {
									has_idea = prioritize_your_people
								}
								multiply_variable = {
									percentage_of_core_fed = 1.5 # Increase ratio that core population recieves food by 1.5
								}
								clamp_variable = {
									var = percentage_of_core_fed
									min = 0
									max = 1
								}
								set_variable = {
									num_of_core_fed = total_core_cost
								}
								multiply_variable = {
									num_of_core_fed = percentage_of_core_fed
								}
								# deal with cases when num_of_core_fed goes over maximum #
								clamp_variable = {
									var = num_of_core_fed
									min = 0
									max = available_grain
								}
								set_variable = {
									percentage_of_core_fed = num_of_core_fed
								}
								divide_variable = {
									percentage_of_core_fed = total_core_cost
								}
								# find percentage of occupied fed
								set_variable = {
									num_of_occupied_fed = available_grain
								}
								subtract_from_variable = {
									num_of_occupied_fed = num_of_core_fed
								}
								set_variable = {
									percentage_of_occupied_fed = num_of_occupied_fed
								}
								divide_variable = {
									percentage_of_occupied_fed = total_occupied_cost
								}
							}
							# Feed occupied first
							else_if = {
								limit = {
									has_idea = feed_occupied_people_first
								}
								set_variable = {
									percentage_of_occupied_fed = available_grain
								}
								divide_variable = {
									percentage_of_occupied_fed = total_occupied_cost
								}
								clamp_variable = {
									var = percentage_of_occupied_fed
									min = 0
									max = 1
								}
								set_variable = {
									percentage_of_core_fed = available_grain
								}
								subtract_from_variable = {
									percentage_of_core_fed = total_occupied_cost
								}
								divide_variable = {
									percentage_of_core_fed = total_core_cost
								}
								clamp_variable = {
									var = percentage_of_core_fed
									min = 0
									max = 1
								}
							}
							# Feed Core First Law
							else_if = {
								limit = {
									has_idea = feed_your_people_first
								}
								set_variable = {
									percentage_of_core_fed = available_grain
								}
								divide_variable = {
									percentage_of_core_fed = total_core_cost
								}
								clamp_variable = {
									var = percentage_of_core_fed
									min = 0
									max = 1
								}
								set_variable = {
									percentage_of_occupied_fed = available_grain
								}
								subtract_from_variable = {
									percentage_of_occupied_fed = total_core_cost
								}
								divide_variable = {
									percentage_of_occupied_fed = total_occupied_cost
								}
								clamp_variable = {
									var = percentage_of_occupied_fed
									min = 0
									max = 1
								}
							}
							set_variable = {
								pcnt_of_core_not_fed = percentage_of_core_fed
							}
							set_variable = {
								pcnt_of_occ_not_fed = percentage_of_occupied_fed
							}
							subtract_from_variable = {
								pcnt_of_core_not_fed = 1
							} 
							subtract_from_variable = {
								pcnt_of_occ_not_fed = 1
							}
						}
						else = {
							set_variable = {
								pcnt_of_core_not_fed = percentage_of_core_fed
							}
							subtract_from_variable = {
								pcnt_of_core_not_fed = 1
							} 
							set_variable = {
								pcnt_of_occ_not_fed = severe_starvation_offset
							}
							set_variable = {
								percentage_of_occupied_fed = 1
							}
						}
						
						# add modifier if there isnt already one
						if = {
							limit = {
								NOT = {
									has_dynamic_modifier = {
										modifier = RK_grain_shortage
									}
								}
							}
							add_dynamic_modifier = {
								modifier = RK_grain_shortage
							}
						}
					}
					################### COAL ############################
					if = {
						limit = {
							check_variable = {
								total_coal_surplus < 0
							}
							check_variable = {
								coal_needed_by_factories_et_synths > 0
							}
						}
						set_variable = {
							percentage_of_refineries_filled = 0
						}
						set_variable = {
							percentage_of_factories_filled = 0
						}
						set_variable = {
							available_coal = total_coal_surplus
						}
						add_to_variable = {
							available_coal = coal_needed_by_factories_et_synths
						}
						############# PERCENT OF ALL FACTORIES AND SYNTHS THAT CAN BE FILLED #####################
						set_variable = {
							percentage_of_facs_et_synths_filled = available_coal
						}
						divide_variable = {
							percentage_of_facs_et_synths_filled = coal_needed_by_factories_et_synths
						}
						##########################################################################################
						# Balanced Law
						set_variable = {
							percentage_of_refineries_filled = percentage_of_facs_et_synths_filled
						}
						set_variable = {
							percentage_of_factories_filled = percentage_of_facs_et_synths_filled
						}
						if = {
							limit = {
								check_variable = {
									total_synth_cost > 0
								}
							}
							# Prioritize Refineries Law
							if = {
								limit = {
									has_idea = prioritize_refineries
								}
								multiply_variable = {
									percentage_of_refineries_filled = 1.5 # Increase ratio that synths recieve fuel by 1.5
								}
								clamp_variable = {
									var = percentage_of_refineries_filled
									min = 0
									max = 1
								}
								set_variable = {
									num_of_refineries_filled = total_synth_cost
								}
								multiply_variable = {
									num_of_refineries_filled = percentage_of_refineries_filled
								}
								# deal with cases when num_of_refineries_filled goes over maximum
								clamp_variable = {
									var = num_of_refineries_filled
									min = 0
									max = available_coal
								}
								set_variable = {
									percentage_of_refineries_filled = num_of_refineries_filled
								}
								divide_variable = {
									percentage_of_refineries_filled = total_synth_cost
								}
								# find how many factories can be fueled
								set_variable = {
									num_of_factories_filled = available_coal
								}
								subtract_from_variable = {
									num_of_factories_filled = num_of_refineries_filled
								}
								set_variable = {
									percentage_of_factories_filled = num_of_factories_filled
								}
								divide_variable = {
									percentage_of_factories_filled = total_factory_cost
								}
							}
							# Prioritize factories law
							else_if = {
								limit = {
									has_idea = prioritize_factories
								}
								multiply_variable = {
									percentage_of_factories_filled = 1.5 # Increase ratio that synths recieve fuel by 1.5
								}
								clamp_variable = {
									var = percentage_of_factories_filled
									min = 0
									max = 1
								}
								set_variable = {
									num_of_factories_filled = total_factory_cost
								}
								multiply_variable = {
									num_of_factories_filled = percentage_of_factories_filled
								}
								# deal with cases when num_of_factories_filled goes over maximum
								clamp_variable = {
									var = num_of_factories_filled
									min = 0
									max = available_coal
								}
								set_variable = {
									percentage_of_factories_filled = num_of_factories_filled
								}
								divide_variable = {
									percentage_of_factories_filled = total_factory_cost
								}
								# find how many refineries can be fueled
								set_variable = {
									num_of_refineries_filled = available_coal
								}
								subtract_from_variable = {
									num_of_refineries_filled = num_of_factories_filled
								}
								set_variable = {
									percentage_of_refineries_filled = num_of_refineries_filled
								}
								divide_variable = {
									percentage_of_refineries_filled = total_synth_cost
								}
							}
							# Fuel Refineries first Law
							else_if = {
								limit = {
									has_idea = fuel_refineries_first
								}
								set_variable = {
									percentage_of_refineries_filled = available_coal
								}
								divide_variable = {
									percentage_of_refineries_filled = total_synth_cost
								}
								clamp_variable = {
									var = percentage_of_refineries_filled
									min = 0
									max = 1
								}
								set_variable = {
									percentage_of_factories_filled = available_coal
								}
								subtract_from_variable = {
									percentage_of_factories_filled = total_synth_cost
								}
								divide_variable = {
									percentage_of_factories_filled = total_factory_cost
								}
								clamp_variable = {
									var = percentage_of_factories_filled
									min = 0
									max = 1
								}
							}
							# Fuel Factories first Law
							else_if = {
								limit = {
									has_idea = fuel_factories_first
								}
								set_variable = {
									percentage_of_factories_filled = available_coal
								}
								divide_variable = {
									percentage_of_factories_filled = total_factory_cost
								}
								clamp_variable = {
									var = percentage_of_factories_filled
									min = 0
									max = 1
								}
								set_variable = {
									percentage_of_refineries_filled = available_coal
								}
								subtract_from_variable = {
									percentage_of_refineries_filled = total_factory_cost
								}
								divide_variable = {
									percentage_of_refineries_filled = total_synth_cost
								}
								clamp_variable = {
									var = percentage_of_refineries_filled
									min = 0
									max = 1
								}
							}
							subtract_from_variable = {
								percentage_of_refineries_filled = 1
							} 
							subtract_from_variable = {
								percentage_of_factories_filled = 1
							}
							clamp_variable = {
								var = percentage_of_refineries_filled
								min = -1
								max = 0
							}
							clamp_variable = {
								var = percentage_of_factories_filled
								min = -1
								max = 0
							}
						}
						else = {
							set_variable = {
								percentage_of_refineries_filled = 0
							}
							subtract_from_variable = {
								percentage_of_factories_filled = 1
							}
							clamp_variable = {
								var = percentage_of_factories_filled
								min = -1
								max = 0
							}
						}

						# Calculate rubber production penalty
						if = {
							limit = {
								check_variable = {
									percentage_of_refineries_filled < 0
								}
							}
							set_variable = {
								rubber_penalty = num_of_synths
							}
							multiply_variable = {
								rubber_penalty = percentage_of_refineries_filled
							}
							# turns positive
							multiply_variable = {
								rubber_penalty = -1
							}
							if = {
								limit = {
									has_tech = rubber_processing
								}
								multiply_variable = {
									rubber_penalty = 2
								}
							} else_if = {
								limit = {
									has_tech = improved_rubber_processing
								}
								multiply_variable = {
									rubber_penalty = 3
								}
							} else_if = {
								limit = {
									has_tech = advanced_rubber_processing
								}
								multiply_variable = {
									rubber_penalty = 4
								}
							} else_if = {
								limit = {
									has_tech = modern_rubber_processing
								}
								multiply_variable = {
									rubber_penalty = 5
								}
							}
							round_variable = rubber_penalty
						} else = {
							set_variable = {
								rubber_penalty = 0
							}
						}
						
						# Cap the shortage penalty for players and ai
						set_variable = {
							factory_output_penalty = percentage_of_factories_filled
						}
						set_variable = {
							refinery_output_penalty = percentage_of_refineries_filled
						}
						multiply_variable = {
							refinery_output_penalty = coal_penalty_multiplier
						}
						multiply_variable = {
							factory_output_penalty = coal_penalty_multiplier
						}
						
						# add modifier if there isnt already one
						if = {
							limit = {
								NOT = {
									has_dynamic_modifier = {
										modifier = RK_coal_shortage
									}
								}
							}
							add_dynamic_modifier = {
								modifier = RK_coal_shortage
							}
						}
					}
				}
			}
		}
	}

	############################# CALCULATES DEATHS IN STATE POPULATION #############################
	on_weekly = {
		effect = {
			ROOT = {
				set_variable = {
					weekly_core_death_count = 0
				}
				set_variable = {
					weekly_occ_death_count = 0
				}
				if = {
					limit = {
						has_dynamic_modifier = {
							modifier = RK_grain_shortage
						}
					}
					add_to_variable = {
						food_shortage_depth = 1
					}
					clamp_variable = {
						var = food_shortage_depth
						max = 52
						min = 0
					}
					set_variable = {
						mean = 26
					}
					set_variable = {
						food_shortage_depth_mult = food_shortage_depth
					}
					clamp_variable = {
						var = food_shortage_depth_mult
						max = mean
						min = 0
					}
					multiply_variable = {
						food_shortage_depth_mult = 0.25
					}
					set_variable = {
						food_shortage_depth_temp2 = food_shortage_depth
					}
					clamp_variable = {
						var = food_shortage_depth_temp2
						max = mean
						min = 0
					}
					multiply_variable = {
						food_shortage_depth_mult = food_shortage_depth_temp2
					}
					multiply_variable = {
						food_shortage_depth_mult = 0.1
					}
					if = {
						limit = {
							check_variable = {
								food_shortage_depth > mean
							}
						}
						set_variable = {
							food_shortage_depth_temp = food_shortage_depth
						}
						multiply_variable = {
							food_shortage_depth_temp = 0.25
						}
						multiply_variable = {
							food_shortage_depth_temp = food_shortage_depth
						}
						multiply_variable = {
							food_shortage_depth_temp = 0.01
						}
						add_to_variable = {
							food_shortage_depth_mult = food_shortage_depth_temp
						}
					}
					multiply_variable = {
						food_shortage_depth_mult = 0.5 # this modifies the importance of food shortage length
					}
					########### CORE ##############
					set_variable = {
						core_manpower_multiplier = pcnt_of_core_not_fed
					}
					subtract_from_variable = {
						core_manpower_multiplier = severe_starvation_offset
					}
					clamp_variable = {
						var = core_manpower_multiplier
						max = 0
						min = -2
					}
					multiply_variable = {
						core_manpower_multiplier = core_manpower_multiplier
					}
					multiply_variable = {
						core_manpower_multiplier = core_manpower_multiplier
					}
					multiply_variable = {
						core_manpower_multiplier = 3 # this modifies the importance of shortage severity
					}
					set_variable = {
						hoooo = core_manpower_multiplier
					}
					multiply_variable = {
						core_manpower_multiplier = food_shortage_depth_mult
					}
					divide_variable = {
						core_manpower_multiplier = -200	# change to a multiplication by -0.005
					}
					clamp_variable = {
						var = core_manpower_multiplier
						min = -1
						max = 0
					}
					########### OCCUPIED ##############
					set_variable = {
						occupied_manpower_multiplier = pcnt_of_occ_not_fed
					}
					subtract_from_variable = {
						occupied_manpower_multiplier = severe_starvation_offset
					}
					clamp_variable = {
						var = occupied_manpower_multiplier
						max = 0
						min = -2
					}
					multiply_variable = {
						occupied_manpower_multiplier = occupied_manpower_multiplier
					}
					multiply_variable = {
						occupied_manpower_multiplier = occupied_manpower_multiplier
					}
					multiply_variable = {
						occupied_manpower_multiplier = 3 # this modifies the importance of shortage severity
					}
					multiply_variable = {
						occupied_manpower_multiplier = food_shortage_depth_mult
					}
					divide_variable = {
						occupied_manpower_multiplier = -200	# change to a multiplication by -0.005
					}
					clamp_variable = {
						var = occupied_manpower_multiplier
						min = -1
						max = 0
					}
					every_controlled_state = {
						if = {
							limit = {
								is_core_of = ROOT
							}
							set_variable = {
								state_manpower_reduction = ROOT.core_manpower_multiplier
							}
							multiply_variable = {
								state_manpower_reduction = state_population_k
							}
							subtract_from_variable = {
								ROOT.weekly_core_death_count = state_manpower_reduction
							}
						}
						else = {
							set_variable = {
								state_manpower_reduction = ROOT.occupied_manpower_multiplier
							}
							multiply_variable = {
								state_manpower_reduction = state_population_k
							}
							subtract_from_variable = {
								ROOT.weekly_occ_death_count = state_manpower_reduction
							}
						}
						add_manpower = state_manpower_reduction
					}
					set_variable = {
						daily_core_death_count = weekly_core_death_count
					}
					divide_variable = {
						daily_core_death_count = 7
					}
					set_variable = {
						daily_occ_death_count = weekly_occ_death_count
					}
					divide_variable = {
						daily_occ_death_count = 7
					}
					set_variable = {
						stability_penalty = core_manpower_multiplier
					}
					multiply_variable = {
						stability_penalty = 0.025
					}
					set_variable = {
						compliance_penalty = occupied_manpower_multiplier
					}
					set_variable = {
						resistance_penalty = compliance_penalty
					}
					multiply_variable = {
						resistance_penalty = -0.2
					}
					if = {
						limit = {
							check_variable = {
								occupied_manpower_multiplier > core_manpower_multiplier
							}
							NOT = {
								check_variable = {
									occupied_manpower_multiplier = 0
								}
							}
						}
						set_variable = {
							ideology_penalty = core_manpower_multiplier
						}
						subtract_from_variable = {
							ideology_penalty = occupied_manpower_multiplier
						}
						multiply_variable = {
							ideology_penalty = -0.3
						}
					} else = {
						set_variable = {
							ideology_penalty = 0
						}
					}
				}
				else = {
					subtract_from_variable = {
						food_shortage_depth = 2
					}
				}
			}
		}
	}

	################## DECOMISSIONS AND RECOMISSIONS FACTORIES IN OCCUPIED STATES ###################
	on_weekly = {
		effect = {
			ROOT = {
				every_controlled_state = {
					limit = {
						NOT = {
							is_core_of = ROOT
						}
					}
					set_variable = {
						AIC = building_level@industrial_complex
					}
					set_variable = {
						AAF = building_level@arms_factory
					}
					set_variable = {
						AD = building_level@dockyard
					}
					set_variable = {
						DIC = building_level@decommissioned_industrial_complex
					}
					set_variable = {
						DAF = building_level@decommissioned_arms_factory
					}
					set_variable = {
						DD = building_level@decommissioned_dockyard
					}
					if = {
						limit = {
							check_variable = {
								THIS.compliance < ROOT.decomission_threshold
							}
						}
						remove_building = {
							type = industrial_complex
							level = AIC
						}
						remove_building = {
							type = arms_factory
							level = AAF
						}
						remove_building = {
							type = dockyard
							level = AD
						}
						add_building_construction = {
							type = decommissioned_industrial_complex
							level = AIC
							instant_build = yes
						}
						add_building_construction = {
							type = decommissioned_arms_factory
							level = AAF
							instant_build = yes
						}
						add_building_construction = {
							type = decommissioned_dockyard
							level = AD
							instant_build = yes
						}
					} else = {
						remove_building = {
							type = decommissioned_industrial_complex
							level = DIC
						}
						remove_building = {
							type = decommissioned_arms_factory
							level = DAF
						}
						remove_building = {
							type = decommissioned_dockyard
							level = DD
						}
						add_building_construction = {
							type = industrial_complex
							level = DIC
							instant_build = yes
						}
						add_building_construction = {
							type = arms_factory
							level = DAF
							instant_build = yes
						}
						add_building_construction = {
							type = dockyard
							level = DD
							instant_build = yes
						}
					}
				}
			}
		}
	}

	######################### APPLY RUBBER PENALTY ################################
	on_weekly = {
		effect = {
			ROOT = {
				### This is where rubber penalty is applied
				add_offsite_building = {
					type = rubber_sink
					level = last_rubber_penalty
				}
				if = {
					limit = {
						has_dynamic_modifier = {
							modifier = RK_coal_shortage
						}
					}
					add_offsite_building = {
						type = rubber_sink
						level = rubber_penalty
					}
					set_variable = {
						last_rubber_penalty = rubber_penalty
					}
					# turns negative
					multiply_variable = {
						last_rubber_penalty = -1
					}
				} else = {
					set_variable = {
						rubber_penalty = 0
					}
					set_variable = {
						last_rubber_penalty = 0
					}
				}
			}
		}
	}
}