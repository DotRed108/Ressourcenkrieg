on_actions = {
	on_startup = {
		effect = {
			########### SETS VARIABLES USED BY THE AI ############
			every_country = {
				THIS = {
					set_variable = {
						population_per_civilian_factory = max_manpower_k
					}
					divide_variable = {
						population_per_civilian_factory = num_of_civilian_factories
					}
					set_variable = {
						decomission_threshold = 40
					}
					set_variable = {
						rations = 1
					}
					set_variable = {
						free_resource_limit_multiplier = 1
					}
					if = {
						limit = {
							is_playing_kaiserreich = yes
						}
						set_variable = {
							coal_disabled = 1
						}
					}
					else = {
						set_variable = {
							coal_disabled = 1
						}
						set_variable = {
							grain_disabled = 1
						}
					}
					set_variable = {
						min_days_of_shortage_for_withdrawal = -1
					}
				}
			}
			######## CHECKS WHAT MOD IS BEING PLAYED ##############
			random_country = {
				if = {
					limit = {
						is_playing_kaiserreich = yes
					}
					set_variable = {
						global.is_playing_kaiserreich = 1
					}
				}
				else_if = {
					limit = {
						is_playing_rt56 = yes
					}
					set_variable = {
						global.is_playing_rt56 = 1
					}
				}
				else_if = {
					limit = {
						is_playing_greater_novosibirsk = yes
					}
					set_variable = {
						global.is_playing_greater_novosibirsk = 1
					}
				}
				else = {
					set_variable = {
						global.is_playing_vanilla = 1
					}
				}
			}
			###### SET DEFAULT COAL AND GRAIN BALANCING VALUES #########
			random_country = {
				set_variable = {
					global.default_starvation_offset = 0.3
				}
				set_variable = {
					global.default_coal_penalty_multiplier = 0.3
				}
			}
			##### SET COAL AND GRAIN BALANCING VALUES FOR ALL NATIONS ######
			every_country = {
				THIS = {
					set_variable = {
						coal_penalty_multiplier = global.default_coal_penalty_multiplier
					}
					if = {
						limit = {
							is_major = yes
						}
						set_variable = {
							coal_penalty_multiplier = 0.8
						}
					}
					# As this goes higher the effects of grain shortage gets worse
					# All balancing of food shortage effects should be done through this number
					# Changing this will have a parabolic effect
					# Increaseing or decreasing outside the range -1 thru 1 will not further amplify the effects
					if = {
						limit = {
							is_major = yes
						}
						set_variable = {
							severe_starvation_offset = 0.6
						}
					}
					else = {
						set_variable = {
							severe_starvation_offset = global.default_starvation_offset
						}
					}
					add_to_variable = {
						grain_stockpile = 1000
					}
					add_to_variable = {
						coal_stockpile = 1000
					}
				}
			}
			# RESOURCES ARE ADDED TO THE MAP HERE
			random_country = {
				if = { # Kaiserreich
					limit = {
						is_playing_kaiserreich = yes
					}
					insert_kr_resources = yes
				}
				else = { # Vanilla 
					insert_vanilla_resources = yes
				}
			}
			# BALANCING DONE HERE
			random_country = {
				# Balance changes for kaiserreich
				if = {
					limit = {
						is_playing_kaiserreich = yes
					}
					# Italy tags
					SRI = {
						capital_scope = {
							add_extra_state_shared_building_slots = 2
							add_building_construction = {
								type = industrial_complex
								level = 2
								instant_build = yes
							}
						}
					}
					SRD = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					ITA = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					SIC = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					PAP = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					# Union of Britain
					ENG = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = synthetic_refinery
								level = 1
								instant_build = yes
							}
						}
					}
					# Nationalist France
					NFA = {
						add_offsite_building = {
							type = industrial_complex
							level = -5
						}
						add_offsite_building = {
							type = arms_factory
							level = -1
						}
						capital_scope = {
							add_extra_state_shared_building_slots = 8
							add_building_construction = {
								type = industrial_complex
								level = 8
								instant_build = yes
							}
						}
					}
					# Netherlands
					HOL = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					# Belgium
					BEL = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					# Japan
					JAP = {
						capital_scope = {
							add_extra_state_shared_building_slots = 1
							add_building_construction = {
								type = industrial_complex
								level = 1
								instant_build = yes
							}
						}
					}
					# Qing
					QIE = {
						capital_scope = {
							add_extra_state_shared_building_slots = 2
							add_building_construction = {
								type = industrial_complex
								level = 2
								instant_build = yes
							}
						}
					}
					# Mittelafrika: Makes the most annoying event in the whole game less common
					MAF = {
						if = {
							limit = {
								is_ai = yes
							}
							add_stability = 0.15
						}
					}
				}
				# Balance chanages for vanilla
				else = {
					# Japan
					JAP = {
						capital_scope = {
							add_extra_state_shared_building_slots = 2
							add_building_construction = {
								type = industrial_complex
								level = 2
								instant_build = yes
							}
						}
					}
					# Russia
					SOV = {
						capital_scope = {
							add_extra_state_shared_building_slots = -3
							add_building_construction = {
								type = industrial_complex
								level = -3
								instant_build = yes
							}
						}
					}
					# America
					USA = {
						capital_scope = {
							add_extra_state_shared_building_slots = -3
							add_building_construction = {
								type = industrial_complex
								level = -3
								instant_build = yes
							}
						}
					}
				}
			}
			# MOD AGNOSTIC BALANCING
			every_country = {
				limit = {
					is_major = no
				}
				THIS = {
					capital_scope = {
						add_extra_state_shared_building_slots = 1
						add_building_construction = {
							type = industrial_complex
							level = 1
							instant_build = yes
						}
					}
				}
			}
		}
	}

	########### UPDATES VARIABLES USED BY THE AI #################
	on_weekly = {
		effect = {
			ROOT = {
				set_variable = {
					population_per_civilian_factory = max_manpower_k
				}
				divide_variable = {
					population_per_civilian_factory = num_of_civilian_factories
				}
			}
		}
	}
	################ UPDATES GRAIN AND COAL BALANCING VALUES AND GIVES FREE STOCKPILE TO VERY SMALL NATIONS #############
	on_monthly = {
		effect = {
			ROOT = {
				# this makes it so that ai nations with very small economies do not have to deal with the grain/coal system until they get bigger. num of owned factories does not count offsite buildings
				set_variable = {
					free_coal_limit = 5
				}
				set_variable = {
					free_grain_limit = 8
				}
				multiply_variable = {
					free_coal_limit = free_resource_limit_multiplier
				}
				multiply_variable = {
					free_grain_limit = free_resource_limit_multiplier
				}
				if = {
					limit = {
						is_ai = no
					}
					multiply_variable = {
						free_coal_limit = 0.6
					}
					multiply_variable = {
						free_grain_limit = 0.6
					}
					round_variable = free_coal_limit
					round_variable = free_grain_limit
				}
				if = {
					limit = {
						has_war = yes
					}
					multiply_variable = {
						free_coal_limit = 0
					}
					multiply_variable = {
						free_grain_limit = 0
					}
				}
				set_variable = {
					rk_factories_only = num_of_owned_factories
				}
				subtract_from_variable = {
					rk_factories_only = num_of_doks
				}
				if = {
					limit = {
						NOT = {
							check_variable = {
								rk_factories_only > free_coal_limit
							}
						}
						is_ai = yes
					}
					set_variable = {
						coal_stockpile = 280
					}
				}
				if = {
					limit = {
						NOT = {
							check_variable = {
								rk_factories_only > free_grain_limit
							}
						}
						is_ai = yes
					}
					set_variable = {
						grain_stockpile = 1000
					}
				}
				# grain balancing
				if = {
					limit = {
						check_variable = {
							severe_starvation_offset = 0
						}
					}
					set_variable = {
						severe_starvation_offset = global.default_starvation_offset
					}
				}
				else_if = {
					limit = {
						num_of_controlled_factories < 25
					}
					set_variable = {
						severe_starvation_offset = 0.3
					}
				}
				else_if = {
					limit = {
						check_variable = {
							severe_starvation_offset < 0.6
						}
					}
					add_to_variable = {
						severe_starvation_offset = 0.05
					}
				}
				# coal balancing
				if = {
					limit = {
						is_major = yes
						check_variable = {
							coal_penalty_multiplier < 0.8
						}
					}
					add_to_variable = {
						coal_penalty_multiplier = 0.05
					}
				}
				else_if = {
					limit = {
						check_variable = {
							num_of_controlled_factories > 25
						}
						check_variable = {
							coal_penalty_multiplier < 0.5
						}
					}
					add_to_variable = {
						coal_penalty_multiplier = 0.05
					}
				}
				else_if = {
					limit = {
						check_variable = {
							coal_penalty_multiplier = 0
						}
					}
					set_variable = {
						coal_penalty_multiplier = global.default_coal_penalty_multiplier
					}
				}
			}
		}
	}
	####################### GIVES AND REMOVES RESOURCE RIGHTS (KAISERREICH ONLY) ################################
	on_daily_FNG = {
		effect = {
			if = {
				limit = {
					check_variable = {
						global.RK_daily_increment = 0
					}
					is_playing_kaiserreich = yes
				}
				# Fengtian / Japan
				FNG = {
					give_resource_rights = {
						state = 328
						receiver = JAP
					}
				}
				# Germany / Mittelafrika
				GER = {
					give_resource_rights = {
						state = 50
						receiver = MAF
					}
				}
			}
			if = {
				limit = {
					FNG_JAP_hostile = yes
				}
				JAP = {
					remove_resource_rights = 328
				}
			}
		}
	}
	####################### GIVES AND REMOVES RESOURCE RIGHTS (south africa and england) ################################
	on_daily_SAF = {
		effect = {
			if = {
				limit = {
					check_variable = {
						global.RK_daily_increment = 0
					}
					is_ally_with = ENG
				}
				ENG = {
					give_resource_rights = {
						state = 545
						receiver = SAF
					}
				}
			}
			if = {
				limit = {
					NOT = {
						is_ally_with = ENG
					}
				}
				SAF = {
					remove_resource_rights = 545
				}
			}
		}
	}
	############# SETS DAILY INCREMENT ##########
	on_daily_GER = {
		effect = {
			if = {
				limit = {
					check_variable = {
						global.RK_daily_increment = 0
					}
				}
				every_country = {
					THIS = {
						set_variable = {
							min_days_of_shortage_for_withdrawal = 2
						}
					}
				}
			}
			add_to_variable = {
				global.RK_daily_increment = 1
			}
		}
	}
}
